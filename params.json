{"name":"Jserialize","tagline":"An University of Zielona Góra student's project about serialization to JSON format in Java language.","body":"JSerialize\r\n==========\r\n\r\nAn University of Zielona Góra student's project about serialization to JSON format in Java language.\r\n\r\n0) TWORZENIE KLUCZA SSH WAZNE!!\r\n\r\nAby mieć dostęp do projektu należy wygenerować swój klucz SSH\r\n-sciagamy program ze strony http://www.ecora.com/ecora/support/putty/puttygen-x86.exe\r\n-wlaczamy program i klikamy przycisk generate (passphrase mozna zostawic puste)\r\n-teraz nalezy poruszać kursorem w okienku programu aby stworzyć losowy klucz na podstawie ruchów\r\n-po chwili zostanie wygenerowany klucz należy teraz wybrac u góry zakładkę Conversions i wybrac opcje export OpenSHH key\r\n-plik nalezy nazwac \"id_rsa\" (bez rozszerzenia) i zapisac w folderze domowym w folderze .ssh (jezeli nie wiemy jaki to \r\n\r\nfolder domowy nalezy wpisac w cmd polecenie \"set HOME\", jezeli nie ma w folderze domowym folderu .ssh nalezy go utworzyc)\r\n\r\nWYGENEROWANY KLUCZ PRZESLAC DO KOORDYNATORA NA FB W WIADOMOSCI PRYWATNEJ INACZEJ NIE BEDZIE DOSTEPU\r\n\r\n\r\n1) Instalacja narzędzia do obsługi systemu kontroli wersji - git\r\n\r\n(WINDOWS)\r\n- pobranie ze strony http://git-scm.com/download\r\n- rozpoczęcie instalacji\r\n- akceptacja licencji\r\n- pozostawienie ustawień standardowych\r\n- wybranie opcji Run git from the Windwos Command Prompt\r\n- dokonczenie instalacji\r\n\r\n(LINUX)\r\n- zależnie od dystrybucji mogłoby to być (apt-get install git) dla Ubuntu lub (aptitude install git) dla Debiana lub inne\r\n- możliwe także pobranie paczki ze strony http://git-scm.com/download\r\n- użycie programu dpkg do instalacji\r\n\r\n\r\n2) Podstawowe pojęcia dla git\r\n\r\n- git clone xxx -- gdzie xxx to adres repozytorium, powoduje pobranie projektu na dysk lokalny\r\n- git status -- polecenie sprawdza czy nastapily jakies zmiany LOKALNE jezeli tak zostanie wystosowany odpowiedni komunikat\r\n- git add xxx-- jezeli polecenie git status wykazuje zmiany, poleceniem tym gdzie xxx to nazwa pliku zalaczamy zmienione \r\n\r\npliki do pozniejszego wykonania commitu\r\n- git commit -- zapisanie aktualnego stanu plikow LOKALNIE i nadanie mu unikalnej nazwy hashowanej oraz opatrzenie zmian \r\n\r\nodpowiednim komentarzem np. git commit -m \"Pierwsza zmiana\", polecenie git commit -a -m pozwala git'owi automatycznie \r\n\r\nwykonac polecenie git add na wszystkich zmienionych plikach\r\n- git checkout -- przemieszczanie się pomiędzy różnymi wersjami (stanami) projektu, np powrot do poprzedniego commitu, bądź \r\n\r\ninnego brancha\r\n- git branch -- polecenie sprawdza czy projekt zawiera inne branche niz standardowy master (branch można rozumieć jako \r\n\r\nosobną scieżkę rozwoju projektu która jednak posiada wspólny punkt (stan) z innymi ścieżkami (branchami)). aby utworzyć \r\n\r\nosobny branch należy użyć polecenie git branch xxx gdzie xxx to nazwa\r\n- git fetch -- pobranie ewentulanych modyfikacji z serwera zdalnego dla naszego projektu\r\n- git push -- zapisanie zmian na serwerze zdalnym (nikt nie pushuje bez wiedzy koordynatora)\r\n- git push xxx -- zapisanie na serwerze oddzielnego brancha\r\n\r\n3) Używanie\r\n\r\nWiększość operacji jakie wykonujemy, wykonujemy jedynie na plikach lokalnych. Do zapisywanie zmian na serwerze zdalnym \r\nsluży komenda git push. Wtedy ma miejsce aktualizacja plików zdalnych na podstawie naszych lokalnych zmian. BARDZO WAŻNE \r\njest aby tuż przed wywołaniem komendy git push wywołać komendę git fetch. Inaczej jeżeli ktoś inny zapisał jakies zmiany na \r\nserwerze mogą one zostać przez nas nadpisane.\r\n\r\n4) Jak będzie wyglądać praca z narzędziem git?\r\n\r\nWszystkie komendy wykonujemy za pomocą lini poleceń znajdując się przy tym w folderze z projektem np:\r\nC:\\JSerialize\\\r\n\r\nUSTAWIAMY GLOBALNA KONFIGURACJE\r\n- git config --global user.name \"IMIE NAZWISKO\"\r\n- git config --global user.email EMAIL\r\n\r\nNależy pobrać ze zdalnego repozytorium nasz projekt. Otwieramy konsole/terminal i wykonujemy polecenie:\r\n\r\n- git clone git@github.com:exesoft/JSerialize.git\r\n\r\nPolecenie to utworzy w lokalizacji, której się znajdujemy folder o nazwie JSerialize\r\n\r\nPo pobraniu powiedzmy, że chcemy wprowadzić zmiany w plikach, a więc otwieramy plik za pomocą ulubionego edytora i \r\n\r\nmodyfikujemy zawartość (załóżmy ze zmiany w pliku o nazwe plik.txt), po czym wykonujemy komendy\r\n\r\n- git add plik.txt\r\n- git commit -m \"Komentarz\"\r\n- git fetch\r\n- ****git push***** -- tylko przed uprzednim otrzymaniem zgody koordynatora, chyba, ze pracujemy na osobnym od innych \r\nbranchu\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}